# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  paths:
    include:
      - src/IdentityService/*
  branches:
    include:
      - master
      
resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'Minor2019Registry'
  imageRepository: 'macedonieje-identity-service'
  containerRegistry: 'minor2019.azurecr.io'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'minor20191672b099-auth'
  solutionPath: 'src/IdentityService'
  projectPath: '$(solutionPath)/IdentityService'
  testProjects: |
    $(solutionPath)/IdentityService.Test
  dockerfilePath: '$(solutionPath)/IdentityService/Dockerfile'
  buildConfiguration: 'Release'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and Analyze
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
      - task: DotNetCoreCLI@2
        displayName: 'dotnet build'
        inputs:
          projects: '$(projectPath)/*.csproj'
          arguments: '--configuration $(BuildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet test'
        inputs:
          command: test
          projects: $(testProjects)
          arguments: '--configuration $(BuildConfiguration) --collect:"Code Coverage"'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet publish'
        inputs:
          command: publish
          publishWebProjects: false
          projects: $(projectPath)/*.csproj
          arguments: '--configuration Release --self-contained -f "netcoreapp3.0" -r "linux-x64" --output "$(projectPath)/obj/Docker/publish"'
          zipAfterPublish: false
          modifyOutputPath: false

      - task: Docker@2
        inputs:
          containerRegistry: '$(dockerRegistryServiceConnection)'
          repository: '$(imageRepository)'
          command: 'buildAndPush'
          Dockerfile: '$(projectPath)/Dockerfile'
          tags: |
            $(tag)
            latest

      - publish: '$(solutionPath)/manifests'
        artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy
    condition: eq(variables['build.sourcebranch'], 'refs/heads/master')
    pool:
      vmImage: $(vmImageName)
    environment: 'Macedonieje.macedonieje'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              namespace: macedonieje
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              namespace: macedonieje
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/*.yaml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
